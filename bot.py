import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, KeyboardButtonPollType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from dotenv import load_dotenv
from db import init_db, add_shop, get_shops, delete_all_shops, import_from_excel, export_to_excel

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMINS = list(map(int, os.getenv("ADMINS", "").split(",")))

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())


# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class AddShop(StatesGroup):
    waiting_for_name = State()
    waiting_for_location = State()


# === –°—Ç–∞—Ä—Ç ===
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìç –ú–∞—Ä–∫–µ—Ç—ã")
    if message.from_user.id in ADMINS:
        kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ç", "üì§ –≠–∫—Å–ø–æ—Ä—Ç", "üì• –ò–º–ø–æ—Ä—Ç")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å–µ—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤!", reply_markup=kb)


# === –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ ===
@dp.message(lambda msg: msg.text == "üìç –ú–∞—Ä–∫–µ—Ç—ã")
async def show_shops(message: types.Message):
    shops = await get_shops()
    if not shops:
        await message.answer("‚ùå –ú–∞–≥–∞–∑–∏–Ω—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return

    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for shop in shops:
        kb.add(KeyboardButton(shop["name"]))
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

    await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=kb)


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ===
@dp.message()
async def send_location(message: types.Message):
    shops = await get_shops()
    for shop in shops:
        if message.text == shop["name"]:
            await message.answer_location(latitude=shop["latitude"], longitude=shop["longitude"])
            return


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===
@dp.message(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ç")
async def add_shop_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await state.set_state(AddShop.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∞:")


@dp.message(AddShop.waiting_for_name)
async def add_shop_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddShop.waiting_for_location)
    kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)
    )
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞:", reply_markup=kb)


@dp.message(AddShop.waiting_for_location)
async def add_shop_location(message: types.Message, state: FSMContext):
    if not message.location:
        return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π.")

    data = await state.get_data()
    name = data["name"]
    lat = message.location.latitude
    lon = message.location.longitude

    await add_shop(name, lat, lon)
    await state.clear()

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìç –ú–∞—Ä–∫–µ—Ç—ã")
    if message.from_user.id in ADMINS:
        kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ç", "üì§ –≠–∫—Å–ø–æ—Ä—Ç", "üì• –ò–º–ø–æ—Ä—Ç")

    await message.answer(f"‚úÖ –ú–∞—Ä–∫–µ—Ç <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb)


# === –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) ===
@dp.message(lambda msg: msg.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç")
async def export_shops(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    file_path = await export_to_excel()
    await message.answer_document(types.FSInputFile(file_path))


# === –ò–º–ø–æ—Ä—Ç –∏–∑ Excel (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) ===
@dp.message(lambda msg: msg.text == "üì• –ò–º–ø–æ—Ä—Ç")
async def import_shops(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ (xlsx):")


@dp.message(lambda msg: msg.document and msg.from_user.id in ADMINS)
async def handle_import_file(message: types.Message):
    file = await bot.download(message.document)
    await delete_all_shops()
    await import_from_excel(file.name)
    await message.answer("‚úÖ –ú–∞–≥–∞–∑–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã (–ë–î –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω–∞)")


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
